services:
  cms-app:
    image: node:16-buster
    environment:
      ENV_VARIABLE: ${ENV_VARIABLE}
      NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
    working_dir: /app
    volumes:
      - ./cms-app/src:/app/src
      - ./cms-app/public:/app/public
      - ./cms-app/_docs:/app/_docs
      - ./cms-app/next.config.js:/app/next.config.js
      - ./cms-app/package.json:/app/package.json
      - ./cms-app/package-lock.json:/app/package-lock.json
      - ./cms-app/dev.sh:/app/dev.sh
    restart: always
    ports:
      - 3001:3000
    command: bash -c "./dev.sh"

  api:
    container_name: api
    user: 1000:1000
    build:
      context: ./truthy
      dockerfile: dockerfile
    volumes:
      - ./truthy:/usr/src/app
    ports:
      - 7777:7777
    env_file:
      - ./truthy/.env
    command: bash -c "./dev.sh"
    depends_on:
      - postgres
      - redis

  pgweb:
    container_name: pgweb
    restart: always
    image: sosedoff/pgweb
    links:
      - postgres:postgres # my database container is called postgres, not db
    environment:
      - DATABASE_URL=postgres://postgres:Aa1234567@postgres:5432/truthy?sslmode=disable
    ports:
      - "8081:8081"
    depends_on:
      - postgres

  postgres:
    container_name: postgres
    image: postgres:12
    env_file:
      - ./truthy/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Aa1234567
      POSTGRES_DB: truthy
      PG_DATA: /var/lib/postgresql/data
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    shm_size: "256m"

  redis:
    image: "redis:alpine"
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - redisdata:/data
    ports:
      - 6379:6379

  proxy:
    build:
      context: ./reverse-proxy/dev
      dockerfile: dockerfile
    restart: always
    ports:
      - 80:80
    depends_on:
      - cms-app
      - api

volumes:
  pgdata:
  redisdata:
