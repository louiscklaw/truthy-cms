services:
  cms-app:
    image: node:16-buster
    environment:
      ENV_VARIABLE: ${ENV_VARIABLE}
      NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
    working_dir: /app
    volumes:
      - ./cms-app/src:/app/src
      - ./cms-app/public:/app/public
      - ./cms-app/_docs:/app/_docs
      - ./cms-app/next.config.js:/app/next.config.js
      - ./cms-app/package.json:/app/package.json
      - ./cms-app/package-lock.json:/app/package-lock.json
      - ./cms-app/dev.sh:/app/dev.sh
    restart: always
    ports:
      - 3001:3000
    command: bash -c "./dev.sh"
    labels:
      - 'traefik.http.routers.cms_app.rule=Host(`test.docker.localhost`) && PathPrefix(`/cms`)'
      - 'traefik.http.services.cms_app.loadbalancer.server.port=3000'

  api:
    restart: always
    user: 1000:1000
    image: node:16-bullseye
    # build:
    #   context: ./truthy
    #   dockerfile: dockerfile
    working_dir: /usr/src/app
    volumes:
      - ./truthy:/usr/src/app
    ports:
      - 7777:7777
    env_file:
      - ./truthy/.env
    command: sleep infinity
    depends_on:
      - postgres
      - redis
    labels:
      - 'traefik.http.routers.api.rule=Host(`test.docker.localhost`) && PathPrefix(`/api`)'
      - 'traefik.http.services.api.loadbalancer.server.port=7777'

  pgweb:
    restart: always
    image: sosedoff/pgweb
    links:
      - postgres:postgres # my database container is called postgres, not db
    environment:
      - DATABASE_URL=postgres://postgres:Aa1234567@postgres:5432/truthy?sslmode=disable
    ports:
      - '8081:8081'
    depends_on:
      - postgres

  postgres:
    restart: always
    image: postgres:12
    env_file:
      - ./truthy/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Aa1234567
      POSTGRES_DB: truthy
      PG_DATA: /var/lib/postgresql/data
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    shm_size: '256m'

  redis:
    image: 'redis:alpine'
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - redisdata:/data
    ports:
      - 6379:6379

  proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.8
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - '80:80'
      # The Web UI (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - 'traefik.http.routers.whoami.rule=Host(`test.docker.localhost`)'

  # proxy:
  #   build:
  #     context: ./reverse-proxy/dev
  #     dockerfile: dockerfile
  #   restart: always
  #   ports:
  #     - 81:81
  #   depends_on:
  #     - cms-app
  #     - api

volumes:
  pgdata:
  redisdata:

networks:
  default:
    external:
      name: traefik-proxy-network
